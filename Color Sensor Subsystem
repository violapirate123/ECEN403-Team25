int CrackSensor = A1; // assigns crack sensor circuit to analog pin 1.
int FirstCrack = 3; // assigns output signal for first crack to digital pin 3.
int SecondCrack = 4; //assigns output signal for second crack to digital pin 4.
bool firstcrackregistered = false; // boolean that is set to true once the coffee roasting process is in the "First crack stage".
bool secondcrackregistered = false; // boolean that is set to true once the coffee roasting process is in the "Second crack stage".
int crackcount = 0; //integer value to count for number of crack sounds.
int secondcrackcount = 0; //integer value to count for number of crack sounds at second crack.

void setup() {
  pinMode (CrackSensor, INPUT); // sets crack sensor as input.
  Serial.begin(9600); // this is test code that allows input for crack sensor to be printed for testing.
  pinMode (FirstCrack, OUTPUT);// sets firstcrack signal as output.
  pinMode (SecondCrack, OUTPUT); // sets secondcrack signal as output.

}

void loop() {
  analogRead(CrackSensor);
  Serial.println(analogRead(CrackSensor)); // test code that prints out what is captured by crack sensor circuit.
  delay(200); // allows for delay of tested inputs to visualize correct numbers from frequencies.
  

  if((180 <= analogRead(CrackSensor))&&(200 >= analogRead(CrackSensor))){ // registers a specific frequency that is converted to a digital number and identifies the crack sound.
    crackcount = crackcount + 1; //increments value of crack sound number everytime desired frequency is detected by the microcontroller.
  }
  else{ //else statement to keep count for first crack the same.
    crackcount = crackcount; //keeps the count for firstcrack the same.
  }

  if(crackcount >= 4){ // if 3-5 CLEAR cracks are heard, the boolean "firstcrackregistered" is set to true.
    firstcrackregistered = true; //boolean is set to true with given condition.
  }


  if((180 <= analogRead(CrackSensor))&&(200 >= analogRead(CrackSensor))&&(firstcrackregistered)){ // frequency has to be within the given range of sound and firstcrack must successfully be registered for second crack to be counted.
  // the addition of the other subsystems like temperature and color will make the conditions for second crack detection a little more robust. For example, a crack noise is heard after the 3-5 good cracks are registered, but temperature and color is not quite to par.
  // this means that the coffee beans are still on the first crack stage because of more cracks occurring. The detection of the ssytems complement eachother and second crack will not be register with any type of external sound if temperature or color dont match. This is true even for first crack.  
    secondcrackcount = secondcrackcount + 1; //increments crack of second counter when statement conditions are meant.
  }

  else{ // else statement that keeps crack count the same when sound is not detected.
    secondcrackcount = secondcrackcount; // keeps crack count the same.
  }

  if(secondcrackcount >= 4){ // 3-5 GOOD cracks have to be detected as well as first crack already happening to set the boolean "secondcrackregistered" true.
    secondcrackregistered = true; // sets second crack boolean to true.
    
  }

if(firstcrackregistered){ //first crack is successfully registered.
  digitalWrite(FirstCrack, HIGH); // LED for first crack stays constantly on when the boolean for first crack is set to true.
} 

else{ // else statement when first crack boolean is set to false.
  digitalWrite(FirstCrack, LOW); //keeps the LED for first crack on while the boolean for first crack remains false.
}

if(secondcrackregistered){ //second crack is successfully registered(first crack mustve already happened for this to take place).
  digitalWrite(SecondCrack, HIGH); // LED for second crack is turned on when boolean for second crack is set to true.
}

else{ // else statement when second crack boolean is set to false.
  digitalWrite(SecondCrack, LOW); // LED for second crack remains off until boolean for second crack is set to true.
}
